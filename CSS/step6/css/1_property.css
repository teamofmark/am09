body, ul, dl, dt, dd,figure{
    margin: 0; padding: 0;
}
div{
    margin-bottom: 30px;
}
.displayProperty span:nth-child(1){
    display: block; width: 50%; background-color: #fc9393;
}
.displayProperty span:nth-child(2){
    display: inline-block; background-color: #94fc93;
    width: 25%;
    /* padding:30px; margin:30px; */
}
.displayProperty span:nth-child(3){
    display: inline; width: 75%; background-color: #93c5fc;
    text-align: center;
    /* padding:30px; margin:30px; */
}
.displayProperty span:nth-child(4){
    display: none;
}
/*
    ? display의 속성은 총 4가지
    * block = block이 되게 되면 width:100%의 값을 갖는 위에서 아래로 나열되는 객체가 된다.
    * inline-block = inline-block이 되면 width의 값을 가질수 있고, inline 타입으로 (옆으로) 나열되는 객체가 된다.
    * inline = inline이 되면 width등의 크기나 간격 등의 값을 가질수 없고 옆으로는 나열 되지만, 간격을 벌릴수 없는 객체가 된다.
    * none = 대상이 보이지 않는다. (렌더 자체가 안된다.)
*/

.visibilityProperty span{
    background-color: #ff6a00; display: block; border: 1px solid black;
}
.visibilityProperty span:first-child{
    visibility: visible;
}
.visibilityProperty span:nth-child(2){
    visibility: hidden; height: 500px;
}
.visibilityProperty input[type="checkbox"]:checked ~ table{
    visibility: visible;
}
.visibilityProperty table{
    visibility: collapse; border-spacing: 0;
}
/*
    ? visibility의 속성은 총 3가지
    * visibility : visible  = 보여주다.
    * visibility : hidden = 감추다.(영역보존)
    * visibility : collapse = none과 달리 실제 존재는 하되 무너져있다.(data받기 용이)
*/

.opacityProperty ul:after{
    content: ''; display: block; visibility: hidden; clear: both;
}
.opacityProperty ul li{
    display: block; float: left; width: 33%; background-color: black; position: relative;
    overflow-y: hidden;
}
.opacityProperty ul li:not(:first-child){
    margin-left: 0.5%;
}
.opacityProperty ul li figure img{
    width: 100%; opacity: 0.3; transition-duration: 0.5s; display: block;
}
.opacityProperty ul li:hover figure img{
    opacity: 1;
}
.opacityProperty ul li figure figcaption{
    position: absolute; left: 0; top: 0; width: 100%; height: 100%; color: white;
    background-color: rgba(0,0,0,0.5); transition-duration: 0.5s; text-align: center; 
    display: flex; align-content: center; justify-content: center; flex-flow: row wrap;
    /* left: 25%; top: 25%; width: 50%; height: 50%; padding-top: 20%; box-sizing: border-box; */
}
.opacityProperty ul li:hover figure figcaption{
    opacity: 0; top: -100%;
}
.opacityProperty ul li figure figcaption dl dt{
    font-size: 24px; font-weight: 600; margin-bottom: 10px;
}
.opacityProperty ul li figure figcaption dl dd{
    font-size: 14px; color: limegreen;
}
/*
    ! opacity의 값은 객체의 투명도를 설정 하며 0 ~ 1 로 규정 할 수 있고 1/100 % 로 표현된다.
*/

.boxsizingProperty div{
    width: 500px; margin: 0 auto; border: 10px solid #ff6a00;
    background-color: #fc9393; padding: 50px;
}
.boxsizingProperty div:first-child{
    box-sizing: content-box;
}
.boxsizingProperty div:last-child{
    box-sizing: border-box;
}
/*
    content-box 속성은 기본적으로 적용되는(default)값, 안의 공간을 해당 width로 잡고 밖에 padding,border를 추가
    계산 하여 총 width를 구하는 방식.
    border-box 속성은 전체 크기를 먼저 width로 잡고 안의 padding, border를 나중에 계산하는 방식

    content-box : box in width + padding + border = width
    border-box : width = box in width - (padding + border)
*/

.shadowProperty h1{
    text-shadow: 5px 10px 10px rgba(0,0,0,0.5);
    /* ? text-shadow: [xAxis] [yAxis] [blur] [color]*/
}
.shadowProperty b{
    text-shadow: 0px 0px 10px rgba(0,255,0,0.8);
}
.shadowProperty p{
    width: 300px; height: 300px; border: 3px solid #f00;
}
.shadowProperty p:first-of-type{
    box-shadow: 8px 10px 2px rgba(255,200,200,0.7);
    /* ? box-shadow: [xAxis] [yAxis] [blur] [spread] [color]*/
}
.shadowProperty p:last-of-type{
    box-shadow: inset 8px 10px 2px rgba(255,200,200,0.7);
}
        /*
    shadow:  
            우측으로 간격, 
            하단으로 간격, 
            흐림도(우측,하단간격 너비의 영향 받음), 
            그림자컬러 또한 속성값 앞에 inset을 삽입하면 
            내부 그림자 효과로 전환 가능
            spread 확산도

    보다 쉽게 만들기
    http://css3generator.com 에서 값입력후 소스코드생성
        */