/* 
    기본
    display: flex;
    justify-content: space-around; ( flexItem 주변 동일 간격 유지 정렬 )
    ! 1. 부모 요소는 flex 혹은 inline-flex 로 지정되어야 한다.
    ? flex = 부모요소가 block으로 배치 되어야 할 때, inline-flex = 부모요소가 inline-block으로 되어야 할 때
    * 그러면 자동으로 이하 자식요소는 모두 flexItem이 된다.
*/
.flexContainer{
    background-color: #a4a4a4; border-radius: 25px; margin: 10px; padding: 15px;
    display: flex;
}
.flexContainer .flexItem{
    margin: 10px; padding: 20px; color: white; background-color: black; text-align: center;
    border-radius: 25px;
}
.flexContainer.test{
    width: 48%; display: inline-flex; box-sizing: border-box;
}

.flexContainer.direction{
    flex-direction: column-reverse;
    /* 
    flex-direction : 
    flex-direction 속성은 flexContainer의 주축(main axis) 방향을 설정한다.

    row (ltr), row-reverse(rtl), column(TopToBottom), column-reverse(BottomToTop)
    */
}
.flexContainer.wrap{
    flex-wrap: wrap-reverse;
    /* 
        flex-wrap : 
        * flex-wrap속성은 flexContainer의 width보다 flexItem들의 width 합계가 큰 경우 한 줄로 나오게 할 것인지, 여러줄로 나오게 할 것인지 결정.

        nowrap(개행불허. 1행 모두배치. default. flexItem width 가능한 범위까지 자동축소)
        wrap(width 초과시 개행) - item width 설정시 %, max,min px설정 하여 원하는 타이밍 설정필요
        wrap-reverse(개행하되 역배치)
    */
}
.flexContainer.wrap .flexItem{
    width: 500px;
}

.flexContainer.flow{
    flex-flow: row-reverse wrap; background-color: green;
    /* 
        flex-flow: <flex-direction> | <flex-wrap>;
        direction, wrap을 줄여 쓸 수(shorthand)있다.
    */
}
.flexContainer.flow .flexItem{
    width: 33.33%; max-width: 500px; min-width: 300px;
}

.flexContainer[class$='Content']{
    padding: 0;
}
.flexContainer[class$='Content'] .flexItem{
    margin: 0;
}
.flexContainer.justifyContent{
    background-color: cyan;
    justify-content: space-around;
    /* 
        justify-content (default : xAxis) : 
        flex container의 main axis를 기준으로 flexItem을 수평(direction: row) 정렬한다.
        
        flex-start (flexItem을 좌측 기준정렬)
        flex-end (flexItem을 우측 기준정렬)
        center (flexItem을 가운데 기준정렬)
        space-between(flexItems중 처음은 좌측, 마지막은 우측, 나머지는 중앙 기준 동일 간격)
        space-evenly(여유 공간을 flexitems 사이의 공간 및 시작,끝선과 flexitems간의 공간에 모두 균등 배분)
        space-around(flexItems 사이의 공간을 최대한 넓게 쓸 수 있게 연산 후 남은 잔여 공간을 /2 나누어 공간 경계 에 배분)
    */
}
.flexContainer.alignContent{
    background-color: orange; flex-wrap: wrap;
    height: 400px;
    align-content: space-between; justify-content: space-between;
    /* 
        align(default : yAxis)
        flexContainer의 crossAxis를 기준으로 flexItem을 수직(direction: row) 정렬한다.

        stretch(default) : flexItems 부모높이 기준으로 잡아 늘린다.
        flex-start : flexItem 들을 부모 높이 기준 위로
        flex-end : flexItem 들을 부모 높이 기준 밑으로
        center : flexItem 들을 부모 높이 기준 중앙으로
        space-between(flexItems중 처음은 상측, 마지막은 하측, 나머지는 중앙 기준 동일 간격)
        space-evenly(여유 공간을 flexitems 사이의 공간 및 시작,끝선과 flexitems간의 공간에 모두 균등 배분)
        space-around(flexItems 사이의 공간을 최대한 높게 쓸 수 있게 연산 후 남은 잔여 공간을 /2 나누어 공간 경계 에 배분)
    */
}
.flexContainer.alignContent .flexItem{
    width: 33.33%; max-width: 500px; min-width: 300px;
}
.flexContainer.justifyItems{
    background-color: yellow; width: 300px;
    display: grid; justify-items: stretch;
}
.flexContainer.justifyItems:hover{
    justify-items: flex-start;
}
.flexContainer.justifyItems .flexItem{
    margin: 1px;
}
/* 
    justify-items :
    * flexItems - parentWidth 기준으로 수평방향 정렬.
    * justify-items 속성은 모든 flexItem에 적용된다.

    * space 3형제 사용불가 (why? 부모가 기준이 되어주는 속성)
    * flex-start / center / flex-end / stretch
*/
.flexContainer.alignItems{
    align-items: baseline;
    background-color: sandybrown;
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px;
}
.flexContainer.alignItems:hover{
    align-items: flex-start;
}
/* 
    align-items :
    * flexItems - items(H/higher) 기준으로 수직방향 정렬.
    * align-items 속성은 모든 flexItem에 적용된다.
    * flex-start / center / flex-end / stretch / baseline
*/
.flexContainer.justifySelf{
    width: 300px; display: grid;  background-color: violet;
}
.flexContainer.justifySelf .flexItem:first-of-type{
    justify-self: stretch;
}
.flexContainer.justifySelf:hover .flexItem:first-of-type{
    justify-self: center;
}
/* 
    justify-self : 
    * 지정된 flexitem에만 justify 적용
    * flex-start / center / flex-end / stretch
*/
.flexContainer.alignSelf{
    background-color: ivory;
}
.flexContainer.alignSelf .flexItem:first-of-type{
    align-self: flex-end;
}
.flexContainer.alignSelf:hover .flexItem:first-of-type{
    align-self: center;
}
.flexContainer.alignSelf .flexItem:nth-of-type(2){
    line-height: 100px;
}
.flexContainer.orderItem .flexItem.order1{
    background-color: lightgreen; font-weight: bold; color: green; order: 1;
}
.flexContainer.orderItem .flexItem.order2{
    background-color: lightblue; font-weight: bold; color: blue; order: -1;
}
.flexContainer.orderItem .flexItem.order3{
    background-color: lightsalmon; font-weight: bold; color: darkred; order: -2;
}
/* 
    order:
    flex container의 flexItem을 0(default)을 기본으로 적은 수일수록(음수가능) 먼저 배치한다. 
*/
.flexContainer.flexShortHand{
    width: 50%; margin: 0; padding: 0;
    /* max-width: 300px; */
}
.flexContainer.flexShortHand .flexItem{
    word-break: break-all; margin: 0; padding: 0;
}
.flexContainer.flexShortHand .flexItem:first-child{
    flex-grow: 2; flex-basis: 0;
    /* 팽창비 */
}
.flexContainer.flexShortHand .flexItem:first-child~*{
    flex-grow: 1; flex-basis: 0;
}
/*
    ? flex-grow(팽창(확장)비):
    ! item의 증가비율을 정한다. default: 0. 즉, 빈 공간을 알아서 확장하여 채우지 않는다.
    ! 음수 비허용. 양수 입력 시 '총 증가 내부팽창지수(grow합산)의 너비중 입력된 비율만큼의 너비를 가진다.
    ! 단, max-width가 설정되면 해당 수치를 넘지 않는다.
    * example. item이 3개이고 item들에게 grow가 1이 부여된다면 각각 1/3(33.33%)의 너비를 갖게 된다.

    ?ex.1 > 만약 전체 너비 (300px)의 item 3개에 개별적으로 grow가 부여되었다면?
    todo. flexItem:first-child{flex-grow:2;} -> 0(basis) + (300/4)*2 = 150.
    todo. flexItem:first-child~*{flex-grow:1;} -> 0(basis) + (300/4)*1 = 75.
    ? why 3(x) 4? = first 2 +  ~* 1 + 1.
*/