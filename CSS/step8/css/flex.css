/* 
    기본
    display: flex;
    justify-content: space-around; ( flexItem 주변 동일 간격 유지 정렬 )
    ! 1. 부모 요소는 flex 혹은 inline-flex 로 지정되어야 한다.
    ? flex = 부모요소가 block으로 배치 되어야 할 때, inline-flex = 부모요소가 inline-block으로 되어야 할 때
    * 그러면 자동으로 이하 자식요소는 모두 flexItem이 된다.
*/
.flexContainer{
    background-color: #a4a4a4; border-radius: 25px; margin: 10px; padding: 15px;
    display: flex;
}
.flexContainer .flexItem{
    margin: 10px; padding: 20px; color: white; background-color: black; text-align: center;
    border-radius: 25px;
}
.flexContainer.test{
    width: 48%; display: inline-flex; box-sizing: border-box;
}

.flexContainer.direction{
    flex-direction: column-reverse;
    /* 
    flex-direction : 
    flex-direction 속성은 flexContainer의 주축(main axis) 방향을 설정한다.

    row (ltr), row-reverse(rtl), column(TopToBottom), column-reverse(BottomToTop)
    */
}
.flexContainer.wrap{
    flex-wrap: wrap-reverse;
    /* 
        flex-wrap : 
        * flex-wrap속성은 flexContainer의 width보다 flexItem들의 width 합계가 큰 경우 한 줄로 나오게 할 것인지, 여러줄로 나오게 할 것인지 결정.

        nowrap(개행불허. 1행 모두배치. default. flexItem width 가능한 범위까지 자동축소)
        wrap(width 초과시 개행) - item width 설정시 %, max,min px설정 하여 원하는 타이밍 설정필요
        wrap-reverse(개행하되 역배치)
    */
}
.flexContainer.wrap .flexItem{
    width: 500px;
}

.flexContainer.flow{
    flex-flow: row-reverse wrap; background-color: green;
    /* 
        flex-flow: <flex-direction> | <flex-wrap>;
        direction, wrap을 줄여 쓸 수(shorthand)있다.
    */
}
.flexContainer.flow .flexItem{
    width: 33.33%; max-width: 500px; min-width: 300px;
}

.flexContainer[class$='Content']{
    padding: 0;
}
.flexContainer[class$='Content'] .flexItem{
    margin: 0;
}
.flexContainer.justifyContent{
    background-color: cyan;
    justify-content: space-around;
    /* 
        justify-content (default : xAxis) : 
        flex container의 main axis를 기준으로 flexItem을 수평(direction: row) 정렬한다.
        
        flex-start (flexItem을 좌측 기준정렬)
        flex-end (flexItem을 우측 기준정렬)
        center (flexItem을 가운데 기준정렬)
        space-between(flexItems중 처음은 좌측, 마지막은 우측, 나머지는 중앙 기준 동일 간격)
        space-evenly(여유 공간을 flexitems 사이의 공간 및 시작,끝선과 flexitems간의 공간에 모두 균등 배분)
        space-around(flexItems 사이의 공간을 최대한 넓게 쓸 수 있게 연산 후 남은 잔여 공간을 /2 나누어 공간 경계 에 배분)
    */
}
.flexContainer.alignContent{
    background-color: orange; flex-wrap: wrap;
    height: 400px;
    align-content: space-between; justify-content: space-between;
    /* 
        align(default : yAxis)
        flexContainer의 crossAxis를 기준으로 flexItem을 수직(direction: row) 정렬한다.

        stretch(default) : flexItems 부모높이 기준으로 잡아 늘린다.
        flex-start : flexItem 들을 부모 높이 기준 위로
        flex-end : flexItem 들을 부모 높이 기준 밑으로
        center : flexItem 들을 부모 높이 기준 중앙으로
        space-between(flexItems중 처음은 상측, 마지막은 하측, 나머지는 중앙 기준 동일 간격)
        space-evenly(여유 공간을 flexitems 사이의 공간 및 시작,끝선과 flexitems간의 공간에 모두 균등 배분)
        space-around(flexItems 사이의 공간을 최대한 높게 쓸 수 있게 연산 후 남은 잔여 공간을 /2 나누어 공간 경계 에 배분)
    */
}
.flexContainer.alignContent .flexItem{
    width: 33.33%; max-width: 500px; min-width: 300px;
}
.flexContainer.justifyItems{
    background-color: yellow; width: 300px;
    display: grid; justify-items: stretch;
}
.flexContainer.justifyItems:hover{
    justify-items: flex-start;
}
.flexContainer.justifyItems .flexItem{
    margin: 1px;
}
/* 
    justify-items :
    * flexItems - parentWidth 기준으로 수평방향 정렬.
    * justify-items 속성은 모든 flexItem에 적용된다.

    * space 3형제 사용불가 (why? 부모가 기준이 되어주는 속성)
    * flex-start / center / flex-end / stretch
*/
.flexContainer.alignItems{
    align-items: baseline;
    background-color: sandybrown;
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px;
}
.flexContainer.alignItems:hover{
    align-items: flex-start;
}
/* 
    align-items :
    * flexItems - items(H/higher) 기준으로 수직방향 정렬.
    * align-items 속성은 모든 flexItem에 적용된다.
    * flex-start / center / flex-end / stretch / baseline
*/
.flexContainer.justifySelf{
    width: 300px; display: grid;  background-color: violet;
}
.flexContainer.justifySelf .flexItem:first-of-type{
    justify-self: stretch;
}
.flexContainer.justifySelf:hover .flexItem:first-of-type{
    justify-self: center;
}
/* 
    justify-self : 
    * 지정된 flexitem에만 justify 적용
    * flex-start / center / flex-end / stretch
*/
.flexContainer.alignSelf{
    background-color: ivory;
}
.flexContainer.alignSelf .flexItem:first-of-type{
    align-self: flex-end;
}
.flexContainer.alignSelf:hover .flexItem:first-of-type{
    align-self: center;
}
.flexContainer.alignSelf .flexItem:nth-of-type(2){
    line-height: 100px;
}
.flexContainer.orderItem .flexItem.order1{
    background-color: lightgreen; font-weight: bold; color: green; order: 1;
}
.flexContainer.orderItem .flexItem.order2{
    background-color: lightblue; font-weight: bold; color: blue; order: -1;
}
.flexContainer.orderItem .flexItem.order3{
    background-color: lightsalmon; font-weight: bold; color: darkred; order: -2;
}
/* 
    order:
    flex container의 flexItem을 0(default)을 기본으로 적은 수일수록(음수가능) 먼저 배치한다. 
*/
.flexContainer.flexShortHand{
    width: 50%; margin: 0; padding: 0;
    /* max-width: 300px; */
}
.flexContainer.flexShortHand .flexItem{
    word-break: break-all; margin: 0; padding: 0;
}
.flexContainer.flexShortHand .flexItem:first-child{
    /*flex-grow: 2; flex-basis: 0;  팽창비 */
    flex-shrink: 2;
    flex-basis: 150px;
}
.flexContainer.flexShortHand .flexItem:first-child~*{
    /* flex-grow: 1; flex-basis: 0;  팽창비 */
    /* flex-shrink: 1;
    flex-basis: 150px;
     */
}
/*
    ? flex-grow(팽창(확장)비):
    ! item의 증가비율을 정한다. default: 0. 즉, 빈 공간을 알아서 확장하여 채우지 않는다.
    ! 음수 비허용. 양수 입력 시 '총 증가 내부팽창지수(grow합산)의 너비중 입력된 비율만큼의 너비를 가진다.
    ! 단, max-width가 설정되면 해당 수치를 넘지 않는다.
    * example. item이 3개이고 item들에게 grow가 1이 부여된다면 각각 1/3(33.33%)의 너비를 갖게 된다.

    ?ex.1 > 만약 전체 너비 (300px)의 item 3개에 개별적으로 grow가 부여되었다면?
    todo. flexItem:first-child{flex-grow:2;} -> 0(basis) + (300/4)*2 = 150.
    todo. flexItem:first-child~*{flex-grow:1;} -> 0(basis) + (300/4)*1 = 75.
    ? why 3(x) 4? = first 2 +  ~* 1 + 1.

    flex-shrink(수축비) :
    기준되는 부모가 줄어들 때 각 item들의 수축비를 정한다. default : 1.
    음수 비허용. 양수 입력시 '총 수축 내부수축지수(shrink합산)의 너비중 입력된 비율만큼 수축될 수 있다.
    단, min-width가 설정되면 해당 수치 이하로 줄어들 수 없다.
    공식 : basis - (각너비/내부수축지수)*비율 = 감소된수치.
    현 상황 > 만약 수축중인 부모너비가 300px인 item 3개(각너비는 150px)의 수축비는
    .flexItem:first-of-type{flex-shrink:2;}-> auto -(150/4)*2= basis 미기재는 안됨.
    .flexItem:first-of-type{flex-shrink:2;}-> 150 - (150/4)*2=  75.                                                                     
    .flexItem:first-of-type~*{flex-shrink:1;}-> 150 - (150/4)*1= 112.5.

    basis:
    ! item의 너비를 정한다. 기본값은 auto 이며 다양한 단위 percentages(%) || ems || rems || pixels 를 사용 할 수있다.
    auto : 안의 컨텐츠의 길이만큼 너비가 늘어난다.

    ! 주의
    ? 1. shorthand로 묶어 사용할 시엔 따로 auto라고 선언하지 않으면 0이 된다.
    ? 2. width와 중복될 경우 basis가 우선시 되기 때문에 중복하여 사용할 필요가 없다. (> basis를 작동조건으로 설정하고 width를 사용하면됨)
    ? 3. content값은 사용 할 수 없다. 만약 어쩔수 없는 상황이라면 auto로 풀고 width를 사용하지 말아야 한다.

    * ex.3 > 만약 전체 너비 (300px)를 item3개의 너비(width: 150px;) 합 (150 * 3 = 450px)이 된다면?
    item기본 크기 + (freeSpace / 수축지수 총 합) * shrink 값 = flex item크기.
    ex > 150+(-150/3)*1 = 100 < 이런식으로 자동 수축 된다.

    * 생략되는 형식
    flex: none;
    flex-grow : 0; flex-shrink: 0; flex-basis: auto; 상태가 됨.

    flex: <flex-grow>
    flex-shrink: 1; flex-basis: 0; 상태가 된다.

    flex: <flex-basis>
    flex-grow: 1; flex-shrink: 1; 상태가 된다.

    flex: <flex-grow> | <flex-shrink>
    flex-basis: 0; 상태가 된다. - 아니..shrink가 작동 하려면 basis가 제한값이 되야 하는데.. 0이라고? = max-width설정이 필요하구나!

    flex: <flex-grow> | <flex-basis>
    flex-shrink: 1; 상태가 된다.

    flex: <flex-grow> | <flex-shrink> | <flex-basis>
    생략한 속성이 없음.

    선생님 pick
    1. flex : 0 1 auto; 확장비는 존재하지 않고 (남는 공간을 자동으로 채우지 못한다.) 수축만 일어나며 컨텐츠의 너비만큼 너비가 설정된다.
    2. flex : none; 확장,수축비 모두 존재하지 않는다.(남는 공간을 채우지도, 수축이 일어나지도 않는다.) 컨텐츠의 너비만큼 너비가 설정된다.
    3. flex : auto; 1 1 auto와 같다. (확장,수축비 모두 컨텐츠 갯수만큼 비율로 분배되어 너비를 갖게 됨) 컨텐츠의 너비만큼 너비가 설정된다.
    ! 만약 그 너비가 컨텐츠보다 작을땐 item이 container(parent)의 너비를 넘게됨.= horizontalScroll이 발생 -> word-break: break-all로 제어.
    ! flexitem의 크기가 각자 다른 경우 남는 공간은 균등하게 분배되지 않고 flexItem크기에 정비례해서 분배된다.
    ! container와 item에 적용된 margin or padding으로 인해 오차가 발생 될 수 있다.
*/