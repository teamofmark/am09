
.tagSelector h1{color:#0c0; font-size:20px;}
.tagSelector p{color:#0cf; font-size:15px;}
.tagSelector span{color:#336; font-size:13px;}

/*태그선택자 사용법*/

.idSelector p#paragraph1{font-size:16px; text-decoration:underline;}
.idSelector p#paragraph2{color:#09F; text-decoration:line-through;}
.idSelector p#paragraph3{font-weight:bold; text-decoration:overline;}

/*ID선택자 사용법*/

.classSelector p.f_size{font-size:20px;}
.classSelector p.f_weight{font-weight:bold;}
.classSelector p.f_color{color:#9cf;}

/*CLASS 선택자 사용법 + 다중 클래스 지정 */

.attrSelector fieldset{
    border: 1px solid #555; background-color: lightseagreen;
}
.attrSelector fieldset legend{
    border: 1px solid slateblue; background-color: #555; color: white; padding: 10px; border-radius: 10px 0 10px;
}
.attrSelector fieldset ul{
    margin: 0; padding: 0; list-style: none;
}
.attrSelector fieldset ul li{
    color: white; font-size: 14px; line-height: 30px; margin-bottom: 10px;
}
.attrSelector fieldset ul li label{
    width: 100px; display: inline-block;
}
.attrSelector fieldset ul li input{
    padding: 5px; vertical-align: middle;
}
.attrSelector fieldset ul li input[type='text']{
    background-color: salmon; border: 3px solid lightyellow; color: maroon;
}   
.attrSelector fieldset ul li input[type='password']{
    background-color: lightgreen; border: 3px solid lime; color: green;
}
.attrSelector fieldset ul li input[type='radio']{
    accent-color: red; width: 25px; height: 25px;
    /* background-color: black; border: 5px solid yellowgreen; */
}
.attrSelector fieldset ul li input[type='checkbox']{
    accent-color: blue; width: 25px; height: 25px;
}

.directSelector > h1{
    font-size: 28px; color: #66f;
}
.directSelector > span{
    font-size: 22px; color:#906; line-height: 40px;
}
/*
    기존 띄어쓰기 - Descendant Selector(자손 선택자)  = 부모 내 모든 자손
    > - Direct (Child) Selector - 직계자손
*/
.sameSelector h1~h2{
    background-color: #999; padding: 10px 0; color: blue;
}
.sameSelector h1+h2{
    font-size: 40px; color: #fcf;
}
/* 
    동위 선택자 ?
    ~ : a 뒤 전체 b (형제 관계)
    + : a 바로뒤 b (형제 관계)
*/

.stringAttrSelector img[src$='jpg']{
    width: 200px; border: 3px solid #0f0;
}
.stringAttrSelector img[src$='png']{
    width: 100px; border: 3px solid #f00;
}
.stringAttrSelector img[src$='gif']{
    width: 300px; border: 10px solid #00f;
}

.stringAttrSelector h1[title *= "제목"]{
    color: red;
}
.stringAttrSelector h1[title ^= "남자"]{
    color: blue;
}
.stringAttrSelector h1[title ~= "탈의실"]{
    color: deeppink;
}
/* 
    ? *= : 해당 단어가 들어가는 모든 대상 선택
    * 모든 유형별선택을 할 수 있으나 다중 클래스 등의 여러 기명을 사용할 경우 오류의 가능성이 높아짐
    ex > font module -> [family][weight][size][lineheight] -> className : r(oboto)B(old)1622 / 이런식의 모듈클래스에서 같이 물려들어갈 확률이 있음
    ? ^= : 해당 단어로 시작하는 것만 선택
    ? $= : 해당 단어로 끝나는 대상만 선택
    ~= : 띄어쓰기 기준. 해당 단어 포함
    |= : 해당 단어로 시작하고 -로 구분되는 대상 선택.
*/

.eventSelector a{
    display: block; margin-bottom: 30px; text-align: center; font-size: 14px;
    line-height: 20px;
}
.eventSelector a:link{ /* ? 대상:link가 걸린 상태 = href attr을 지닌 상태. */
    color: red; background-color: black; text-decoration: none;
}
.eventSelector a:hover{ /* ? 대상: mouse cursor가 올라간 상태. */
    color: black; background-color: red; text-decoration: underline;
}
.eventSelector a:active{ /* ? 대상:click이 일어났을때*/
    color: red; background-color: white; text-decoration: line-through;
}
.eventSelector a:visited{ /* ? 대상:을 방문한 적이 있는 상태 / 배경은 cursor를 올렸을 때 / 기존 선행속성들 영향을 받음*/
    color: gray; background-color: white;
    /* border: 1px solid gray; */
}
.eventSelector a:focus{ /* ? 대상:에 초점이 맞춰진 상태.*/
    border: 3px solid deeppink;
}

/*반응선택자 - 링크 수업 부분 과 동일*/

.statusSelector input[type='checkbox'] + label{
    line-height: 22px; display: inline-block; overflow: hidden;
    /* transition: line-height 0.3s ease-out; */
}
.statusSelector input[type='checkbox']:checked + label{
    line-height: 0px;
}
.statusSelector input{
    display: block; margin: 10px 0;
}
.statusSelector input:enabled{
    /* 모든 input default value */
    background-color: black; color: yellow;
}
.statusSelector input:disabled{
    background-color: lightgray; color: gray;
}
ul.virtualSelector{
    overflow: hidden; margin: 0; padding: 0; list-style: none;
}
ul.virtualSelector li{
    width: 14.28%; box-sizing: border-box; margin: 0; padding: 15px; float: left; text-align: center;
}
ul.virtualSelector li:first-child{
    /* nth-child(1) */
    border-radius: 20px 0 0 20px;
}
ul.virtualSelector li:last-child{
    /* ! nth 대체 불가. ex> nth-child(7) ? 대상이줄어들면 불가*/
    border-radius: 0 20px 20px 0;
}
ul.virtualSelector li:nth-child(2n){
    background-color: #09f;
}
ul.virtualSelector li:nth-child(2n+1){
    background-color: #444;
}
/* 
    -child : 부모를 기준으로 선택하는 자손 선택자.
    ex> :nth-child(2) -> 부모 기준으로 두번째 자손
*/

/* .shapeSelector h1:nth-of-type(2){color: #30f;} */
/* .shapeSelector h2:first-of-type{color: #0c6;} */
/* .shapeSelector h3:last-of-type{color: #f06;} */
/* 
    -of-type : 자신과 같은 대상을 기준으로 선택하는 형제 선택자.
    ex> :nth-of-type(2) -> 부모 내 모든 태그들의 두번째 대상.
*/
/* todo. 위와 동일한 결과를 -child로 변환하여 적용해보기 */
.shapeSelector :last-child{
    color: #30f;
}
.shapeSelector :nth-child(2){
    color: #0c6;
}
.shapeSelector :nth-child(4){
    color: #f06;
}

.textSelector h1::first-letter{
    font-size: 100px; color: #09f;
}
.textSelector p::first-line{
    color: #090; font-size: 40px; line-height: 50px; text-decoration: underline;
}
.backandfrontSelector p{
    counter-increment: rint;
}
.backandfrontSelector p::before{
    content: counter(rint) ".";
    /* 
        함수 = 기능
        f(x); = f가 기능. x가 재료.
    */
}
.backandfrontSelector p::after{
    content: '-' attr(data-page) "page"; font-weight: bold; color: deeppink;
}
.reactionSelector *{
    color: white;
}
.reactionSelector *::selection{
    background-color: #000; color: #ff0;
    /* 
        ? 특정 색의 취약한 사람들에게도 잘 보일수 있는 :selection 색상 값을 굳이 건드릴 이유는 없다.
        * "웹접근성 고대비율" 검색을 해서 컬러를 만들어 내는 것을 권장
    */
}
.notSelector input:not([type='submit'],[type='reset']){
    background-color: blue; color: white;
}